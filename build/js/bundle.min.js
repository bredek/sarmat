!function(n,e){var i=function(n){return new i.init(n)};i.prototype={verticalSwiper:{},initShowSubMenu:function(){var i=e("#js-menu-toggle"),t=e("#js-sub-menu");i.on("click",function(n){n.preventDefault(),i.toggleClass("opened"),t.fadeToggle(function(){t.toggleClass("opened")})})},initSlider:function(){e("#js-slider").slick({})},initAllPlugins:function(){this.initShowSubMenu(),this.initSlider()}},i.init=function(n){this.initAllPlugins()},i.init.prototype=i.prototype,n.bredek=n.BREDEK=i}(window,jQuery),$(document).ready(function(){BREDEK()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
