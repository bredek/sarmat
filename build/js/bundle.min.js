!function(n,t){var i=function(n){return new i.init(n)};i.prototype={verticalSwiper:{},initShowSubMenu:function(){var n=t("#js-menu-toggle"),i=t("#js-sub-menu");n.on("click",function(){n.toggleClass("opened"),i.fadeToggle(function(){i.toggleClass("opened")})})},initAllPlugins:function(){this.initShowSubMenu()}},i.init=function(n){this.initAllPlugins()},i.init.prototype=i.prototype,n.bredek=n.BREDEK=i}(window,jQuery),$(document).ready(function(){BREDEK()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
